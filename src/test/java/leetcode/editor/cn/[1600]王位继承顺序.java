package leetcode.editor.cn;

import org.junit.Assert;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class SolutionTest1600 {
//‰∏Ä‰∏™ÁéãÂõΩÈáå‰ΩèÁùÄÂõΩÁéã„ÄÅ‰ªñÁöÑÂ≠©Â≠ê‰ª¨„ÄÅ‰ªñÁöÑÂ≠ôÂ≠ê‰ª¨Á≠âÁ≠â„ÄÇÊØè‰∏Ä‰∏™Êó∂Èó¥ÁÇπÔºåËøô‰∏™ÂÆ∂Â∫≠ÈáåÊúâ‰∫∫Âá∫Áîü‰πüÊúâ‰∫∫Ê≠ª‰∫°„ÄÇ
//
// Ëøô‰∏™ÁéãÂõΩÊúâ‰∏Ä‰∏™ÊòéÁ°ÆËßÑÂÆöÁöÑÁéã‰ΩçÁªßÊâøÈ°∫Â∫èÔºåÁ¨¨‰∏ÄÁªßÊâø‰∫∫ÊÄªÊòØÂõΩÁéãËá™Â∑±„ÄÇÊàë‰ª¨ÂÆö‰πâÈÄíÂΩíÂáΩÊï∞ Successor(x, curOrder) ÔºåÁªôÂÆö‰∏Ä‰∏™‰∫∫ x ÂíåÂΩìÂâçÁöÑÁªß
//ÊâøÈ°∫Â∫èÔºåËØ•ÂáΩÊï∞ËøîÂõû x ÁöÑ‰∏ã‰∏ÄÁªßÊâø‰∫∫„ÄÇ
//
//
//Successor(x, curOrder):
//    Â¶ÇÊûú x Ê≤°ÊúâÂ≠©Â≠êÊàñËÄÖÊâÄÊúâ x ÁöÑÂ≠©Â≠êÈÉΩÂú® curOrder ‰∏≠Ôºö
//        Â¶ÇÊûú x ÊòØÂõΩÁéãÔºåÈÇ£‰πàËøîÂõû null
//        Âê¶ÂàôÔºåËøîÂõû Successor(x ÁöÑÁà∂‰∫≤, curOrder)
//    Âê¶ÂàôÔºåËøîÂõû x ‰∏çÂú® curOrder ‰∏≠ÊúÄÂπ¥ÈïøÁöÑÂ≠©Â≠ê
//
//
// ÊØîÊñπËØ¥ÔºåÂÅáËÆæÁéãÂõΩÁî±ÂõΩÁéãÔºå‰ªñÁöÑÂ≠©Â≠ê Alice Âíå Bob ÔºàAlice ÊØî Bob Âπ¥ÈïøÔºâÂíå Alice ÁöÑÂ≠©Â≠ê Jack ÁªÑÊàê„ÄÇ
//
//
// ‰∏ÄÂºÄÂßãÔºå curOrder ‰∏∫ ["king"].
// Ë∞ÉÁî® Successor(king, curOrder) ÔºåËøîÂõû Alice ÔºåÊâÄ‰ª•Êàë‰ª¨Â∞Ü Alice ÊîæÂÖ• curOrder ‰∏≠ÔºåÂæóÂà∞ ["king",
// "Alice"] „ÄÇ
// Ë∞ÉÁî® Successor(Alice, curOrder) ÔºåËøîÂõû Jack ÔºåÊâÄ‰ª•Êàë‰ª¨Â∞Ü Jack ÊîæÂÖ• curOrder ‰∏≠ÔºåÂæóÂà∞ ["king",
//"Alice", "Jack"] „ÄÇ
// Ë∞ÉÁî® Successor(Jack, curOrder) ÔºåËøîÂõû Bob ÔºåÊâÄ‰ª•Êàë‰ª¨Â∞Ü Bob ÊîæÂÖ• curOrder ‰∏≠ÔºåÂæóÂà∞ ["king",
//"Alice", "Jack", "Bob"] „ÄÇ
// Ë∞ÉÁî® Successor(Bob, curOrder) ÔºåËøîÂõû null „ÄÇÊúÄÁªàÂæóÂà∞ÁªßÊâøÈ°∫Â∫è‰∏∫ ["king", "Alice", "Jack",
//"Bob"] „ÄÇ
//
//
// ÈÄöËøá‰ª•‰∏äÁöÑÂáΩÊï∞ÔºåÊàë‰ª¨ÊÄªÊòØËÉΩÂæóÂà∞‰∏Ä‰∏™ÂîØ‰∏ÄÁöÑÁªßÊâøÈ°∫Â∫è„ÄÇ
//
// ËØ∑‰Ω†ÂÆûÁé∞ ThroneInheritance Á±ªÔºö
//
//
// ThroneInheritance(string kingName) ÂàùÂßãÂåñ‰∏Ä‰∏™ ThroneInheritance Á±ªÁöÑÂØπË±°„ÄÇÂõΩÁéãÁöÑÂêçÂ≠ó‰Ωú‰∏∫ÊûÑÈÄ†ÂáΩÊï∞ÁöÑÂèÇ
//Êï∞‰º†ÂÖ•„ÄÇ
// void birth(string parentName, string childName) Ë°®Á§∫ parentName Êñ∞Êã•Êúâ‰∫Ü‰∏Ä‰∏™Âêç‰∏∫
//childName ÁöÑÂ≠©Â≠ê„ÄÇ
// void death(string name) Ë°®Á§∫Âêç‰∏∫ name ÁöÑ‰∫∫Ê≠ª‰∫°„ÄÇ‰∏Ä‰∏™‰∫∫ÁöÑÊ≠ª‰∫°‰∏ç‰ºöÂΩ±Âìç Successor ÂáΩÊï∞Ôºå‰πü‰∏ç‰ºöÂΩ±ÂìçÂΩìÂâçÁöÑÁªßÊâøÈ°∫Â∫è„ÄÇ‰Ω†
//ÂèØ‰ª•Âè™Â∞ÜËøô‰∏™‰∫∫Ê†áËÆ∞‰∏∫Ê≠ª‰∫°Áä∂ÊÄÅ„ÄÇ
// string[] getInheritanceOrder() ËøîÂõû Èô§Âéª Ê≠ª‰∫°‰∫∫ÂëòÁöÑÂΩìÂâçÁªßÊâøÈ°∫Â∫èÂàóË°®„ÄÇ
//
//
//
//
// Á§∫‰æãÔºö
//
//
//ËæìÂÖ•Ôºö
//["ThroneInheritance", "birth", "birth", "birth", "birth", "birth", "birth",
//"getInheritanceOrder", "death", "getInheritanceOrder"]
//[["king"], ["king", "andy"], ["king", "bob"], ["king", "catherine"], ["andy",
//"matthew"], ["bob", "alex"], ["bob", "asha"], [null], ["bob"], [null]]
//ËæìÂá∫Ôºö
//[null, null, null, null, null, null, null, ["king", "andy", "matthew", "bob",
//"alex", "asha", "catherine"], null, ["king", "andy", "matthew", "alex", "asha",
//"catherine"]]
//
//Ëß£ÈáäÔºö
//ThroneInheritance t= new ThroneInheritance("king"); // ÁªßÊâøÈ°∫Â∫èÔºöking
//t.birth("king", "andy"); // ÁªßÊâøÈ°∫Â∫èÔºöking > andy
//t.birth("king", "bob"); // ÁªßÊâøÈ°∫Â∫èÔºöking > andy > bob
//t.birth("king", "catherine"); // ÁªßÊâøÈ°∫Â∫èÔºöking > andy > bob > catherine
//t.birth("andy", "matthew"); // ÁªßÊâøÈ°∫Â∫èÔºöking > andy > matthew > bob > catherine
//t.birth("bob", "alex"); // ÁªßÊâøÈ°∫Â∫èÔºöking > andy > matthew > bob > alex >
//catherine
//t.birth("bob", "asha"); // ÁªßÊâøÈ°∫Â∫èÔºöking > andy > matthew > bob > alex > asha >
//catherine
//t.getInheritanceOrder(); // ËøîÂõû ["king", "andy", "matthew", "bob", "alex",
//"asha", "catherine"]
//t.death("bob"); // ÁªßÊâøÈ°∫Â∫èÔºöking > andy > matthew > bobÔºàÂ∑≤ÁªèÂéª‰∏ñÔºâ> alex > asha >
//catherine
//t.getInheritanceOrder(); // ËøîÂõû ["king", "andy", "matthew", "alex", "asha",
//"catherine"]
//
//
//
//
// ÊèêÁ§∫Ôºö
//
//
// 1 <= kingName.length, parentName.length, childName.length, name.length <= 15
//
// kingNameÔºåparentNameÔºå childName Âíå name ‰ªÖÂåÖÂê´Â∞èÂÜôËã±ÊñáÂ≠óÊØç„ÄÇ
// ÊâÄÊúâÁöÑÂèÇÊï∞ childName Âíå kingName ‰∫í‰∏çÁõ∏Âêå„ÄÇ
// ÊâÄÊúâ death ÂáΩÊï∞‰∏≠ÁöÑÊ≠ª‰∫°ÂêçÂ≠ó name Ë¶Å‰πàÊòØÂõΩÁéãÔºåË¶Å‰πàÊòØÂ∑≤ÁªèÂá∫Áîü‰∫ÜÁöÑ‰∫∫ÂëòÂêçÂ≠ó„ÄÇ
// ÊØèÊ¨°Ë∞ÉÁî® birth(parentName, childName) Êó∂ÔºåÊµãËØïÁî®‰æãÈÉΩ‰øùËØÅ parentName ÂØπÂ∫îÁöÑ‰∫∫ÂëòÊòØÊ¥ªÁùÄÁöÑ„ÄÇ
// ÊúÄÂ§öË∞ÉÁî® 10‚Åµ Ê¨°birth Âíå death „ÄÇ
// ÊúÄÂ§öË∞ÉÁî® 10 Ê¨° getInheritanceOrder „ÄÇ
//
//
// Related TopicsÊ†ë | Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ | ËÆæËÆ° | ÂìàÂ∏åË°®
//
// üëç 103, üëé 0bug ÂèçÈ¶à | ‰ΩøÁî®ÊåáÂçó | Êõ¥Â§öÈÖçÂ•óÊèí‰ª∂
//
//
//
//

    public static
            //leetcode submit region begin(Prohibit modification and deletion)
    class ThroneInheritance {

        private final Map<String, Person> map;

        private String kingName;

        public ThroneInheritance(String kingName) {
            map = new HashMap<>();
            this.kingName = kingName;
            map.put(kingName, new Person(kingName));
        }

        public void birth(String parentName, String childName) {
            Person person = map.get(parentName);
            Person add = person.add(childName);
            map.put(childName, add);
        }

        public void death(String name) {
            map.get(name).death();
        }

        public List<String> getInheritanceOrder() {
            return getChildren(kingName);
        }

        private List<String> getChildren(String kingName) {
            List<String> ans = new ArrayList<>();
            Person person = map.get(kingName);
            if (!person.death) {
                ans.add(kingName);
            }
            for (Person children : person.childrenList) {
                ans.addAll(getChildren(children.name));
            }
            return ans;
        }

        public static class Person {

            private String name;
            private Boolean death;
            private List<Person> childrenList;

            public Person(String name) {
                this.name = name;
                this.death = false;
                this.childrenList = new ArrayList<>();
            }

            public Person add(String children) {
                Person child = new Person(children);
                childrenList.add(child);
                return child;
            }

            public void death() {
                this.death = true;
            }
        }
    }

    /**
     * Your ThroneInheritance object will be instantiated and called as such:
     * ThroneInheritance obj = new ThroneInheritance(kingName);
     * obj.birth(parentName,childName);
     * obj.death(name);
     * List<String> param_3 = obj.getInheritanceOrder();
     */
//leetcode submit region end(Prohibit modification and deletion)

//Do some Test
    public static class TestClass {

        @Test
        public void defaultSolutionTest() {
            ThroneInheritance throneInheritance = new ThroneInheritance("king");
            throneInheritance.birth("king", "andy");
            throneInheritance.birth("king", "bob");
            throneInheritance.birth("king", "catherine");
            throneInheritance.birth("andy", "matthew");
            throneInheritance.birth("bob", "alex");
            throneInheritance.birth("bob", "asha");
            Assert.assertEquals("[king, andy, matthew, bob, alex, asha, catherine]", throneInheritance.getInheritanceOrder().toString());
            throneInheritance.death("bob");
            Assert.assertEquals("", throneInheritance.getInheritanceOrder().toString());
        }

    }
}
